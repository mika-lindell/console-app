:root {
  --syntax-secondary: #777777;
  --syntax-primary: #CF6A4C;
  --syntax-var-type: #F9EE98;
  --syntax-attr: #8F9D6A;
  --syntax-atrule: #7587A6;
  --syntax-important: #E9C062;
  --syntax-regex: #E9C062;
}

/*
  Syntax highlighting styles
  Based on PrismJs Twilight-theme
  https://github.com/PrismJS/prism/blob/gh-pages/themes/prism-twilight.css
*/

:global(.language-html) {
  white-space: pre-wrap;
}

:global(.language-javascript) {
  white-space: pre-wrap;
}

/* Secondary elements */

:global(.token.comment) {
  color: var(--syntax-secondary);
}

:global(.token.prolog) {
  color: var(--syntax-secondary);
}

:global(.token.doctype) {
  color: var(--syntax-secondary);
}

:global(.token.cdata) {
  color: var(--syntax-secondary);
}

:global(.token.punctuation) {
  opacity: 0.7;
}

:global(.namespace) {
  opacity: 0.7;
}

/* Primary elements */

:global(.token.tag) {
  color: var(--syntax-primary);
}

:global(.token.boolean) {
  color: var(--syntax-primary);
}

:global(.token.number) {
  color: var(--syntax-primary);
}

:global(.token.deleted) {
  color: var(--syntax-primary);
}

/* Variable types */

:global(.token.keyword) {
  color: var(--syntax-var-type);
}

:global(.token.property) {
  color: var(--syntax-var-type);
}

:global(.token.selector) {
  color: var(--syntax-var-type);
}

:global(.token.constant) {
  color: var(--syntax-var-type);
}

:global(.token.symbol) {
  color: var(--syntax-var-type);
}

:global(.token.builtin) {
  color: var(--syntax-var-type);
}

/* Attributes & values */

:global(.token.attr-name) {
  color: var(--syntax-attr);
}

:global(.token.attr-value) {
  color: var(--syntax-attr);
}

:global(.token.string) {
  color: var(--syntax-attr);
}

:global(.token.char) {
  color: var(--syntax-attr);
}

:global(.token.operator) {
  color: var(--syntax-attr);
}

:global(.token.entity) {
  color: var(--syntax-attr);
}

:global(.token.url) {
  color: var(--syntax-attr);
}

:global(.token.variable) {
  color: var(--syntax-attr);
}

:global(.token.inserted) {
  color: var(--syntax-attr);
}

/* @-rules */

:global(.token.atrule) {
  color: var(--syntax-atrule);
}

/* Special modifiers */

:global(.token.important) {
  color: var(--syntax-special);
}

/* Regex */

:global(.token.important) {
  color: var(--syntax-regex);
}
